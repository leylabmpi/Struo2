if not config['names_dmp'].startswith('Skip') and \
   not config['nodes_dmp'].startswith('Skip'):
    localrules: kraken2_cp_dump  
    rule kraken2_cp_dump:
        """
        Copying names/nodes taxdump files to kraken2 db directory
        """
        input:
            names = ancient(config['names_dmp']),
            nodes = ancient(config['nodes_dmp'])
        output:
            names = config['tmp_dir'] + 'kraken2/taxonomy/names.dmp',
            nodes = config['tmp_dir'] + 'kraken2/taxonomy/nodes.dmp'
        log:
            log_dir + 'kraken2_cp_dump/all.log'
        shell:
            """
            cp -f {input.names} {output.names} 2> {log}
            cp -f {input.nodes} {output.nodes} 2>> {log}
            chmod u+w {output.names} {output.nodes} 2>> {log}
            """
else:
    localrules: kraken2_build_download_tax
    rule kraken2_build_download_tax:
        """
        Downloading NCBI taxdump files
        """
        output:
            gb = config['tmp_dir'] + 'kraken2/taxonomy/nucl_gb.accession2taxid',
            wgs = config['tmp_dir'] + 'kraken2/taxonomy/nucl_wgs.accession2taxid',
            dump = config['tmp_dir'] + 'kraken2/taxonomy/taxdump.tar.gz',
            nodes = config['tmp_dir'] + 'kraken2/taxonomy/nodes.dmp',
            names = config['tmp_dir'] + 'kraken2/taxonomy/names.dmp',
            merged = config['tmp_dir'] + 'kraken2/taxonomy/merged.dmp'
        params:
            exe = config['pipeline']['script_folder'] + 'kraken2-build'
        conda:
            '../../envs/kraken2.yaml'
        log:
            log_dir + 'kraken_build_download_tax/all.log'
        benchmark:
            benchmark_dir + 'kraken_build_download_tax/all.txt'
        shell:
            """
            OUTDIR=`dirname {output.gb}`
            OUTDIR=`dirname $OUTDIR`
            rm -rf $OUTDIR 2> {log}
            mkdir -p $OUTDIR 2>> {log}
            echo "# Downloading NCBI taxonomy to $OUTDIR" >> {log}
            {params.exe} --use-ftp --download-taxonomy --db $OUTDIR 2>> {log} 1>&2
            """

def kraken2_add_taxID_get_taxID(wildcards):
    """
    Getting genome taxID from the user input table
    """
    taxID = config['samples'].loc[wildcards.sample, config['taxID_col']]
    try:
        taxID = taxID.astype(str)
    except AttributeError:
        pass
    return taxID
            
rule kraken2_add_taxID:
    """
    Adding a taxononmy ID to the header of each genome.
    Assuming the taxID is in the samples table.
    Writing edited genome to temp dir.

    Format: `kraken:taxid|<taxID>|<seqID>`
    """
    input:
        fasta = lambda wildcards: \
	  config['samples'].loc[wildcards.sample, config['fasta_file_path_col']]
    output:
        temp(config['tmp_dir'] + 'genomes/{sample}.fna')
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59,
        mem_gb_pt = lambda wildcards, attempt: attempt * 6
    params:
        taxID = kraken2_add_taxID_get_taxID,
        exe = config['pipeline']['script_folder'] + 'kraken2_rename_genome.py'
    log:
        log_dir + 'kraken2_add_taxID/{sample}.log'
    benchmark:
        benchmark_dir + 'kraken2_add_taxID/{sample}.txt'
    shell:
        """
        {params.exe} {input.fasta} {params.taxID} > {output} 2> {log}
        """

rule kraken2_build_add:
    """
    Adding genome fasta files to the kraken database.
    Using the --add-to-library flag
    """
    input:
        fasta = config['tmp_dir'] + 'genomes/{sample}.fna',
        nodes = config['tmp_dir'] + 'kraken2/taxonomy/nodes.dmp',
        names = config['tmp_dir'] + 'kraken2/taxonomy/names.dmp'
    output:
        done = temp(config['tmp_dir'] + 'kraken2/added/{sample}.done')
    threads:
        4
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 59,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: attempt * 3
    conda:
        '../../envs/kraken2.yaml'
    log:
        log_dir + 'kraken2_build_add/{sample}.log'
    benchmark:
        benchmark_dir + 'kraken2_build_add/{sample}.txt'
    shell:
        """
        DB=`dirname {input.names}`
        DB=`dirname $DB`

        kraken2-build --threads {threads} \
          --db $DB --add-to-library {input.fasta} \
          2> {log} 1>&2
        touch {output.done} 2>> {log}
        """
    
rule kraken2_build:
    """
    Building the kraken database
    """
    input:
        expand(config['tmp_dir'] + 'kraken2/added/{sample}.done',
	       sample = config['samples_unique'])
    output:
        hash = temp(config['tmp_dir'] + 'kraken2/hash.k2d'),
        opts = temp(config['tmp_dir'] + 'kraken2/opts.k2d'),
        map  = temp(config['tmp_dir'] + 'kraken2/seqid2taxid.map'),
        taxo = temp(config['tmp_dir'] + 'kraken2/taxo.k2d')        
    threads:
        12
    resources:
        time = lambda wildcards, attempt: attempt ** 2 * 60 * 24,
        n = lambda wildcards, attempt, threads: threads,
        mem_gb_pt = lambda wildcards, attempt: int(round(attempt * 18 + 4,0))
    conda:
        '../../envs/kraken2.yaml'
    log:
        log_dir + 'kraken2_build/all.log'
    benchmark:
        benchmark_dir + 'kraken2_build/all.txt'
    shell:
        """
        DB=`dirname {output.hash}`
        kraken2-build --build --threads {threads} --db $DB 2> {log} 1>&2
        """
    
rule kraken2_db_copy:
    """
    Copying the kraken2 database to the output directory
    """
    input:
        hash = config['tmp_dir'] + 'kraken2/hash.k2d',
        opts = config['tmp_dir'] + 'kraken2/opts.k2d',
        taxo = config['tmp_dir'] + 'kraken2/taxo.k2d',
        map  = config['tmp_dir'] + 'kraken2/seqid2taxid.map'
    output:
        hash = kraken2_dir + 'hash.k2d',
        opts = kraken2_dir + 'opts.k2d',
        taxo = kraken2_dir + 'taxo.k2d',
        map  = kraken2_dir + 'seqid2taxid.map'
    params:
        keep = config['keep_intermediate'],
        ionice = config['params']['ionice']
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'kraken2_db_copy/all.log'
    benchmark:
        benchmark_dir + 'kraken2_db_copy/all.txt'
    shell:
        """
        if [ "{params.keep}" == "True" ]; then
          echo "# copying entire kraken db" > {log}
          DIR1=`dirname {input.hash}`
          DIR2=`dirname {output.hash}`
          rm -rf $DIR2 2>> {log} 1>&2
          ionice {params.ionice} cp -rf $DIR1 $DIR2 2>> {log} 1>&2
        else
          echo "# copying just built kraken index files" > {log}
          ionice {params.ionice} cp -f {input.hash} {output.hash} 2>> {log} 1>&2
          ionice {params.ionice} cp -f {input.opts} {output.opts} 2>> {log} 1>&2
          ionice {params.ionice} cp -f {input.map} {output.map} 2>> {log} 1>&2
          ionice {params.ionice} cp -f {input.taxo} {output.taxo} 2>> {log} 1>&2
        fi
        """
    
rule kraken2_tmp_db_rm:
    """
    Removing temporary kraken2 db directory
    """
    input:
        hash_tmp = config['tmp_dir'] + 'kraken2/hash.k2d',
        hash = kraken2_dir + 'hash.k2d',
        opts = kraken2_dir + 'opts.k2d',
        taxo = kraken2_dir + 'taxo.k2d',
        map  = kraken2_dir + 'seqid2taxid.map'
    output:
        done = kraken2_dir + 'tmp_db_rm.done'
    resources:
        time = lambda wildcards, attempt: attempt ** 3 * 59
    log:
        log_dir + 'kraken2_tmp_db_rm/all.log'
    shell:
        """
        rm -rf `dirname {input.hash_tmp}` 2> {log} 1>&2
        touch {output.done} 2>> {log}
        """
